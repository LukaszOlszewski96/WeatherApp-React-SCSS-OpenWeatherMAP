{"version":3,"sources":["components/WeatherCard.jsx","App.js","index.js"],"names":["WeatherCard","name","type","temp","className","Math","round","calendar","day","getDay","date","getDate","month","getMonth","year","getFullYear","Date","App","API_KEY","API_URL","useState","weather","setWeather","city","setCity","latitude","setLatitude","longitude","setLongitude","savePositionToState","position","coords","fetchWeather","a","window","navigator","geolocation","getCurrentPosition","axios","get","result","data","console","error","useEffect","href","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","onClick","main","ReactDOM","render","document","getElementById"],"mappings":"+OAkCeA,EA9BK,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAc9B,OACI,sBAAKC,UAAY,OAAjB,UACI,mBAAGA,UAAY,OAAf,SAAuBF,IACvB,oBAAGE,UAAY,OAAf,UACc,WAATF,GAAqB,cAAC,IAAD,IACZ,UAATA,GAAoB,cAAC,IAAD,IACX,SAATA,GAAmB,cAAC,IAAD,IACV,SAATA,GAAmB,cAAC,IAAD,OAExB,oBAAGE,UAAY,OAAf,UAAuBC,KAAKC,MAAMH,GAAM,4CACxC,oBAAIC,UAAY,YAAhB,SAA6BH,IAC7B,mBAAGG,UAAY,OAAf,SAvBQ,SAACG,GACb,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAASE,UACpBC,EAAOH,EAASI,UAChBC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAASM,YACxBC,EAAOP,EAASQ,cAEpB,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAcPH,CAAQ,IAAIK,Y,QCyDhCC,MAhFf,WAEE,IAAMC,EAAU,mCACVC,EAAS,2CAEf,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGMC,EAAsB,SAACC,GAC3BJ,EAAYI,EAASC,OAAON,UAC5BG,EAAaE,EAASC,OAAOJ,YAczBK,EAAY,uCAAG,4BAAAC,EAAA,+EAEXC,OAAOC,UAAUC,YAAYC,mBAAoBR,GAFtC,uBAGIS,IAAMC,IAAN,UAAapB,EAAb,wBAAoCM,EAApC,gBAAoDE,EAApD,+BAAoFT,IAHxF,OAGXsB,EAHW,OAIjBlB,EAAWkB,EAAOC,MAClBjB,EAAQ,IALS,kDAOjBkB,QAAQC,MAAR,MAPiB,0DAAH,qDAgBlB,OALAC,qBAAU,WACRZ,MACC,CAACP,EAAUE,IAIZ,sBAAKvB,UAAY,gBAAjB,UACE,iCACE,mBAAGyC,KAAK,IAAIzC,UAAY,OAAxB,6BAEF,qBAAKA,UAAY,mBAAjB,SACE,sBAAKA,UAAY,YAAjB,UACE,uBACIF,KAAK,OACL4C,YAAc,aACdC,SAAY,SAAAC,GAAC,OAAIxB,EAAQwB,EAAEC,OAAOC,QAClCA,MAAS3B,EACT4B,WAvCG,SAACH,GACD,UAAVA,EAAEI,KACHC,MAAM,GAAD,OAAIlC,EAAJ,qBAAwBI,EAAxB,+BAAmDL,IACrDoC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAd,GACJlB,EAAWkB,GACXhB,EAAQ,UAmCJ,mBACEpB,UAAY,gBACZyC,KAAO,IACPY,QAASzB,EAHX,SAGyB,cAAC,IAAD,WAIjC,qBAAK5B,UAAY,iBAAjB,SAC2B,oBAAhBiB,EAAQqC,KACf,cAAC,EAAD,CACEzD,KAAQoB,EAAQpB,KAChBC,KAAQmB,EAAQA,QAAQ,GAAGqC,KAC3BvD,KAAQkB,EAAQqC,KAAKvD,OAEzB,cAAC,EAAD,CACEF,KAAO,OACPC,KAAO,OACPC,KAAO,sBC5EjBwD,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.2d8158f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport {TiWeatherCloudy, TiWeatherSunny, TiWeatherSnow, TiWeatherShower} from 'react-icons/ti';\r\n\r\n\r\nconst WeatherCard = ({name, type, temp}) => {\r\n\r\n    const getDate = (calendar) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    \r\n        let day = days[calendar.getDay()];\r\n        let date = calendar.getDate();\r\n        let month = months[calendar.getMonth()];\r\n        let year = calendar.getFullYear();\r\n    \r\n        return `${day} ${date} ${month} ${year}`\r\n      }\r\n\r\n    return (\r\n        <div className = \"card\">\r\n            <p className = \"type\">{type}</p>\r\n            <p className = \"icon\">\r\n                {type === \"Clouds\" && <TiWeatherCloudy/>}\r\n                {type === \"Clear\" && <TiWeatherSunny/>}\r\n                {type === \"Snow\" && <TiWeatherSnow/>}\r\n                {type === \"Rain\" && <TiWeatherShower/>}\r\n            </p>\r\n            <p className = \"temp\">{Math.round(temp)}<span>Â°C</span></p>\r\n            <h1 className = \"city-name\">{name}</h1>\r\n            <p className = \"date\">{getDate(new Date())}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, {useEffect, useState} from 'react';\nimport './styles/styles.css';\nimport axios from 'axios';\nimport WeatherCard from './components/WeatherCard';\nimport {MdMyLocation} from 'react-icons/md'\n\nfunction App() {\n\n  const API_KEY = 'd45746fdd0c6436f874b3fe49df4118b'\n  const API_URL ='https://api.openweathermap.org/data/2.5/'\n\n  const [weather, setWeather] = useState({});\n  const [city, setCity] = useState(\"\");\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n \n\n  const savePositionToState = (position) => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const search = (e) => {\n    if(e.key === \"Enter\") {\n      fetch(`${API_URL}weather?q=${city}&units=metric&APPID=${API_KEY}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setCity('');\n        });\n    }\n  }\n\n  const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition( savePositionToState);\n      const result = await axios.get(`${API_URL}/weather?lat=${latitude}&lon=${longitude}&units=metric&APPID=${API_KEY}`);\n      setWeather(result.data);\n      setCity('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]);\n\n\n  return (\n    <div className = \"app-conteiner\">\n      <header>\n        <a href=\"/\" className = \"logo\"> Good Weather</a>\n      </header>\n      <div className = \"search-conteiner\">\n        <div className = \"input-box\">\n          <input\n              type=\"text\"\n              placeholder = \"Enter city\" \n              onChange = {e => setCity(e.target.value)}\n              value = {city}\n              onKeyPress = {search}\n              />\n              <a \n                className = \"location-icon\" \n                href = \"#\" \n                onClick={fetchWeather}><MdMyLocation/>\n              </a>\n        </div>\n      </div>\n      <div className = \"data-conteiner\">\n        {(typeof weather.main != 'undefined') ? (\n          <WeatherCard\n            name = {weather.name}\n            type = {weather.weather[0].main}\n            temp = {weather.main.temp}/>\n        ) : \n        <WeatherCard\n          name = \"City\"\n          type = \"Type\"\n          temp = \"Temperature\"/>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}